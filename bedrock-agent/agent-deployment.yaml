AWSTemplateFormatVersion: '2010-09-09'
Description: 'Bedrock Agent for NavieTakie Simulation'

Parameters:
  AccountId:
    Type: String
    Description: AWS Account ID
    Default: '123456789012'
  
  AgentName:
    Type: String
    Default: 'NavieTakieAssistant'
    Description: Name of the Bedrock Agent
  
  FoundationModel:
    Type: String
    Default: 'anthropic.claude-3-sonnet-20240229-v1:0'
    Description: Foundation model for the agent

Resources:
  # IAM Role for Bedrock Agent
  BedrockAgentRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${AgentName}Role'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: bedrock.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSBedrockAgentServiceRolePolicy
      Policies:
        - PolicyName: NavieTakieAgentPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                Resource: 
                  - !Sub 'arn:aws:lambda:${AWS::Region}:${AccountId}:function:send-message'
                  - !Sub 'arn:aws:lambda:${AWS::Region}:${AccountId}:function:make-call'
                  - !Sub 'arn:aws:lambda:${AWS::Region}:${AccountId}:function:get-message'
              - Effect: Allow
                Action:
                  - dynamodb:GetItem
                  - dynamodb:PutItem
                  - dynamodb:Query
                  - dynamodb:Scan
                Resource: !Sub 'arn:aws:dynamodb:${AWS::Region}:${AccountId}:table/chat-messages'

  # Bedrock Agent
  BedrockAgent:
    Type: AWS::Bedrock::Agent
    Properties:
      AgentName: !Ref AgentName
      Description: 'AI Agent for Grab-style driver and passenger communication system'
      Instruction: |
        You are an AI assistant for a ride-sharing platform that facilitates communication between drivers (DAX) and passengers (PAX). 
        Your role is to help users send messages, make calls, and manage their ride experience. 
        You can understand voice and text inputs and route them to appropriate backend services.
      AgentResourceRoleArn: !GetAtt BedrockAgentRole.Arn
      FoundationModel: !Ref FoundationModel
      IdleSessionTTLInSeconds: 3600
      MaxConcurrency: 5
      Tags:
        - Key: Project
          Value: NavieTakieSimulation
        - Key: Environment
          Value: Production
        - Key: CostCenter
          Value: R&D

  # Tool for sending messages
  SendMessageTool:
    Type: AWS::Bedrock::Agent::Tool
    Properties:
      AgentId: !Ref BedrockAgent
      ToolName: send_message
      Description: Send a message to the other party (driver or passenger)
      InputSchema:
        type: object
        properties:
          booking_code:
            type: string
            description: The booking code for the ride
          message:
            type: string
            description: The message content to send
          sender:
            type: string
            enum: [driver, passenger]
            description: Who is sending the message
        required: [booking_code, message, sender]

  # Tool for making calls
  MakeCallTool:
    Type: AWS::Bedrock::Agent::Tool
    Properties:
      AgentId: !Ref BedrockAgent
      ToolName: make_call
      Description: Initiate a voice call between driver and passenger
      InputSchema:
        type: object
        properties:
          booking_code:
            type: string
            description: The booking code for the ride
          call_type:
            type: string
            enum: [voice, video]
            default: voice
            description: Type of call to make
        required: [booking_code]

  # Tool for getting messages
  GetMessagesTool:
    Type: AWS::Bedrock::Agent::Tool
    Properties:
      AgentId: !Ref BedrockAgent
      ToolName: get_messages
      Description: Retrieve message history for a booking
      InputSchema:
        type: object
        properties:
          booking_code:
            type: string
            description: The booking code for the ride
        required: [booking_code]

  # Tool for getting ride status
  GetRideStatusTool:
    Type: AWS::Bedrock::Agent::Tool
    Properties:
      AgentId: !Ref BedrockAgent
      ToolName: get_ride_status
      Description: Get current ride status and details
      InputSchema:
        type: object
        properties:
          booking_code:
            type: string
            description: The booking code for the ride
        required: [booking_code]

  # Lambda function for tool execution
  ToolExecutionLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: navietakie-tool-execution
      Runtime: python3.9
      Handler: index.handler
      Role: !GetAtt ToolExecutionLambdaRole.Arn
      Code:
        ZipFile: |
          import json
          import boto3
          import os
          
          def handler(event, context):
              print(f"Event: {json.dumps(event)}")
              
              # Parse the event
              tool_name = event.get('toolName')
              tool_input = event.get('input', {})
              
              # Route to appropriate Lambda function
              lambda_client = boto3.client('lambda')
              
              if tool_name == 'send_message':
                  function_name = 'send-message'
                  payload = {
                      'booking_code': tool_input['booking_code'],
                      'message': tool_input['message'],
                      'sender': tool_input['sender']
                  }
              elif tool_name == 'make_call':
                  function_name = 'make-call'
                  payload = {
                      'booking_code': tool_input['booking_code'],
                      'call_type': tool_input.get('call_type', 'voice')
                  }
              elif tool_name == 'get_messages':
                  function_name = 'get-message'
                  payload = {
                      'booking_code': tool_input['booking_code']
                  }
              else:
                  return {
                      'statusCode': 400,
                      'body': json.dumps({'error': f'Unknown tool: {tool_name}'})
                  }
              
              # Invoke the appropriate Lambda function
              response = lambda_client.invoke(
                  FunctionName=function_name,
                  InvocationType='RequestResponse',
                  Payload=json.dumps(payload)
              )
              
              result = json.loads(response['Payload'].read())
              return result
      Environment:
        Variables:
          AWS_REGION: !Ref AWS::Region
      Timeout: 30
      MemorySize: 128

  # IAM Role for Tool Execution Lambda
  ToolExecutionLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: ToolExecutionPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                Resource: 
                  - !Sub 'arn:aws:lambda:${AWS::Region}:${AccountId}:function:send-message'
                  - !Sub 'arn:aws:lambda:${AWS::Region}:${AccountId}:function:make-call'
                  - !Sub 'arn:aws:lambda:${AWS::Region}:${AccountId}:function:get-message'

Outputs:
  AgentId:
    Description: Bedrock Agent ID
    Value: !Ref BedrockAgent
    Export:
      Name: !Sub '${AWS::StackName}-AgentId'
  
  AgentArn:
    Description: Bedrock Agent ARN
    Value: !GetAtt BedrockAgent.AgentArn
    Export:
      Name: !Sub '${AWS::StackName}-AgentArn'
  
  AgentRoleArn:
    Description: Bedrock Agent Role ARN
    Value: !GetAtt BedrockAgentRole.Arn
    Export:
      Name: !Sub '${AWS::StackName}-AgentRoleArn' 