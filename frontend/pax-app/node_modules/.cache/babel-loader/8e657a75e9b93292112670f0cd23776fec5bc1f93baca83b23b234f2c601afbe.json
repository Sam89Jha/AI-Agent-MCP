{"ast":null,"code":"/**\n * Configuration for PAX App\n * Environment-specific settings for local, staging, and production\n */\n\nconst getEnvironment = () => {\n  // Check for environment variable\n  if (process.env.REACT_APP_ENVIRONMENT) {\n    return process.env.REACT_APP_ENVIRONMENT;\n  }\n\n  // Check hostname for environment detection\n  const hostname = window.location.hostname;\n  if (hostname.includes('localhost') || hostname.includes('127.0.0.1')) {\n    return 'local';\n  } else if (hostname.includes('staging')) {\n    return 'staging';\n  } else {\n    return 'production';\n  }\n};\nconst configs = {\n  local: {\n    apiBaseUrl: 'http://localhost:8000',\n    websocketUrl: 'ws://localhost:8000/ws',\n    environment: 'local',\n    debug: true,\n    features: {\n      voiceRecognition: true,\n      realTimeUpdates: true,\n      analytics: false\n    }\n  },\n  staging: {\n    apiBaseUrl: 'https://mcp-staging.sameer-jha.com',\n    websocketUrl: 'wss://mcp-staging.sameer-jha.com/ws',\n    environment: 'staging',\n    debug: true,\n    features: {\n      voiceRecognition: true,\n      realTimeUpdates: true,\n      analytics: true\n    }\n  },\n  production: {\n    apiBaseUrl: 'https://mcp.sameer-jha.com',\n    websocketUrl: 'wss://mcp.sameer-jha.com/ws',\n    environment: 'production',\n    debug: false,\n    features: {\n      voiceRecognition: true,\n      realTimeUpdates: true,\n      analytics: true\n    }\n  }\n};\nconst currentConfig = configs[getEnvironment()] || configs.local;\n\n// API endpoints\nexport const API_ENDPOINTS = {\n  SEND_MESSAGE: `${currentConfig.apiBaseUrl}/api/v1/send_message`,\n  MAKE_CALL: `${currentConfig.apiBaseUrl}/api/v1/make_call`,\n  GET_MESSAGES: `${currentConfig.apiBaseUrl}/api/v1/get_message`,\n  AI_AGENT: `${currentConfig.apiBaseUrl}/api/v1/ai_agent`,\n  HEALTH: `${currentConfig.apiBaseUrl}/health`\n};\n\n// Configuration exports\nexport const CONFIG = {\n  ...currentConfig,\n  isLocal: () => currentConfig.environment === 'local',\n  isStaging: () => currentConfig.environment === 'staging',\n  isProduction: () => currentConfig.environment === 'production',\n  isDebug: () => currentConfig.debug,\n  getApiUrl: endpoint => `${currentConfig.apiBaseUrl}${endpoint}`,\n  getWebsocketUrl: () => currentConfig.websocketUrl\n};\n\n// Feature flags\nexport const FEATURES = currentConfig.features;\n\n// Debug logging\nif (CONFIG.isDebug()) {\n  console.log('ðŸ”§ PAX App Configuration:', CONFIG);\n  console.log('ðŸš€ Features:', FEATURES);\n}\nexport default CONFIG;","map":{"version":3,"names":["getEnvironment","process","env","REACT_APP_ENVIRONMENT","hostname","window","location","includes","configs","local","apiBaseUrl","websocketUrl","environment","debug","features","voiceRecognition","realTimeUpdates","analytics","staging","production","currentConfig","API_ENDPOINTS","SEND_MESSAGE","MAKE_CALL","GET_MESSAGES","AI_AGENT","HEALTH","CONFIG","isLocal","isStaging","isProduction","isDebug","getApiUrl","endpoint","getWebsocketUrl","FEATURES","console","log"],"sources":["/Users/sameer.jha/Python_Projects/NavieTakieSimulation/frontend/pax-app/src/config.js"],"sourcesContent":["/**\n * Configuration for PAX App\n * Environment-specific settings for local, staging, and production\n */\n\nconst getEnvironment = () => {\n  // Check for environment variable\n  if (process.env.REACT_APP_ENVIRONMENT) {\n    return process.env.REACT_APP_ENVIRONMENT;\n  }\n  \n  // Check hostname for environment detection\n  const hostname = window.location.hostname;\n  if (hostname.includes('localhost') || hostname.includes('127.0.0.1')) {\n    return 'local';\n  } else if (hostname.includes('staging')) {\n    return 'staging';\n  } else {\n    return 'production';\n  }\n};\n\nconst configs = {\n  local: {\n    apiBaseUrl: 'http://localhost:8000',\n    websocketUrl: 'ws://localhost:8000/ws',\n    environment: 'local',\n    debug: true,\n    features: {\n      voiceRecognition: true,\n      realTimeUpdates: true,\n      analytics: false\n    }\n  },\n  \n  staging: {\n    apiBaseUrl: 'https://mcp-staging.sameer-jha.com',\n    websocketUrl: 'wss://mcp-staging.sameer-jha.com/ws',\n    environment: 'staging',\n    debug: true,\n    features: {\n      voiceRecognition: true,\n      realTimeUpdates: true,\n      analytics: true\n    }\n  },\n  \n  production: {\n    apiBaseUrl: 'https://mcp.sameer-jha.com',\n    websocketUrl: 'wss://mcp.sameer-jha.com/ws',\n    environment: 'production',\n    debug: false,\n    features: {\n      voiceRecognition: true,\n      realTimeUpdates: true,\n      analytics: true\n    }\n  }\n};\n\nconst currentConfig = configs[getEnvironment()] || configs.local;\n\n// API endpoints\nexport const API_ENDPOINTS = {\n  SEND_MESSAGE: `${currentConfig.apiBaseUrl}/api/v1/send_message`,\n  MAKE_CALL: `${currentConfig.apiBaseUrl}/api/v1/make_call`,\n  GET_MESSAGES: `${currentConfig.apiBaseUrl}/api/v1/get_message`,\n  AI_AGENT: `${currentConfig.apiBaseUrl}/api/v1/ai_agent`,\n  HEALTH: `${currentConfig.apiBaseUrl}/health`\n};\n\n// Configuration exports\nexport const CONFIG = {\n  ...currentConfig,\n  isLocal: () => currentConfig.environment === 'local',\n  isStaging: () => currentConfig.environment === 'staging',\n  isProduction: () => currentConfig.environment === 'production',\n  isDebug: () => currentConfig.debug,\n  getApiUrl: (endpoint) => `${currentConfig.apiBaseUrl}${endpoint}`,\n  getWebsocketUrl: () => currentConfig.websocketUrl\n};\n\n// Feature flags\nexport const FEATURES = currentConfig.features;\n\n// Debug logging\nif (CONFIG.isDebug()) {\n  console.log('ðŸ”§ PAX App Configuration:', CONFIG);\n  console.log('ðŸš€ Features:', FEATURES);\n}\n\nexport default CONFIG; "],"mappings":"AAAA;AACA;AACA;AACA;;AAEA,MAAMA,cAAc,GAAGA,CAAA,KAAM;EAC3B;EACA,IAAIC,OAAO,CAACC,GAAG,CAACC,qBAAqB,EAAE;IACrC,OAAOF,OAAO,CAACC,GAAG,CAACC,qBAAqB;EAC1C;;EAEA;EACA,MAAMC,QAAQ,GAAGC,MAAM,CAACC,QAAQ,CAACF,QAAQ;EACzC,IAAIA,QAAQ,CAACG,QAAQ,CAAC,WAAW,CAAC,IAAIH,QAAQ,CAACG,QAAQ,CAAC,WAAW,CAAC,EAAE;IACpE,OAAO,OAAO;EAChB,CAAC,MAAM,IAAIH,QAAQ,CAACG,QAAQ,CAAC,SAAS,CAAC,EAAE;IACvC,OAAO,SAAS;EAClB,CAAC,MAAM;IACL,OAAO,YAAY;EACrB;AACF,CAAC;AAED,MAAMC,OAAO,GAAG;EACdC,KAAK,EAAE;IACLC,UAAU,EAAE,uBAAuB;IACnCC,YAAY,EAAE,wBAAwB;IACtCC,WAAW,EAAE,OAAO;IACpBC,KAAK,EAAE,IAAI;IACXC,QAAQ,EAAE;MACRC,gBAAgB,EAAE,IAAI;MACtBC,eAAe,EAAE,IAAI;MACrBC,SAAS,EAAE;IACb;EACF,CAAC;EAEDC,OAAO,EAAE;IACPR,UAAU,EAAE,oCAAoC;IAChDC,YAAY,EAAE,qCAAqC;IACnDC,WAAW,EAAE,SAAS;IACtBC,KAAK,EAAE,IAAI;IACXC,QAAQ,EAAE;MACRC,gBAAgB,EAAE,IAAI;MACtBC,eAAe,EAAE,IAAI;MACrBC,SAAS,EAAE;IACb;EACF,CAAC;EAEDE,UAAU,EAAE;IACVT,UAAU,EAAE,4BAA4B;IACxCC,YAAY,EAAE,6BAA6B;IAC3CC,WAAW,EAAE,YAAY;IACzBC,KAAK,EAAE,KAAK;IACZC,QAAQ,EAAE;MACRC,gBAAgB,EAAE,IAAI;MACtBC,eAAe,EAAE,IAAI;MACrBC,SAAS,EAAE;IACb;EACF;AACF,CAAC;AAED,MAAMG,aAAa,GAAGZ,OAAO,CAACR,cAAc,CAAC,CAAC,CAAC,IAAIQ,OAAO,CAACC,KAAK;;AAEhE;AACA,OAAO,MAAMY,aAAa,GAAG;EAC3BC,YAAY,EAAE,GAAGF,aAAa,CAACV,UAAU,sBAAsB;EAC/Da,SAAS,EAAE,GAAGH,aAAa,CAACV,UAAU,mBAAmB;EACzDc,YAAY,EAAE,GAAGJ,aAAa,CAACV,UAAU,qBAAqB;EAC9De,QAAQ,EAAE,GAAGL,aAAa,CAACV,UAAU,kBAAkB;EACvDgB,MAAM,EAAE,GAAGN,aAAa,CAACV,UAAU;AACrC,CAAC;;AAED;AACA,OAAO,MAAMiB,MAAM,GAAG;EACpB,GAAGP,aAAa;EAChBQ,OAAO,EAAEA,CAAA,KAAMR,aAAa,CAACR,WAAW,KAAK,OAAO;EACpDiB,SAAS,EAAEA,CAAA,KAAMT,aAAa,CAACR,WAAW,KAAK,SAAS;EACxDkB,YAAY,EAAEA,CAAA,KAAMV,aAAa,CAACR,WAAW,KAAK,YAAY;EAC9DmB,OAAO,EAAEA,CAAA,KAAMX,aAAa,CAACP,KAAK;EAClCmB,SAAS,EAAGC,QAAQ,IAAK,GAAGb,aAAa,CAACV,UAAU,GAAGuB,QAAQ,EAAE;EACjEC,eAAe,EAAEA,CAAA,KAAMd,aAAa,CAACT;AACvC,CAAC;;AAED;AACA,OAAO,MAAMwB,QAAQ,GAAGf,aAAa,CAACN,QAAQ;;AAE9C;AACA,IAAIa,MAAM,CAACI,OAAO,CAAC,CAAC,EAAE;EACpBK,OAAO,CAACC,GAAG,CAAC,2BAA2B,EAAEV,MAAM,CAAC;EAChDS,OAAO,CAACC,GAAG,CAAC,cAAc,EAAEF,QAAQ,CAAC;AACvC;AAEA,eAAeR,MAAM","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}