{"ast":null,"code":"var _jsxFileName = \"/Users/sameer.jha/Python_Projects/NavieTakieSimulation/frontend/pax-app/src/App.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport styled from 'styled-components';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport { FaMicrophone, FaMicrophoneSlash, FaPaperPlane, FaPhone, FaUser, FaCar } from 'react-icons/fa';\nimport axios from 'axios';\nimport { API_ENDPOINTS } from './config';\n\n// Types\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n// Styled Components (same as DAX app)\nconst AppContainer = styled.div`\n  min-height: 100vh;\n  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n  display: flex;\n  flex-direction: column;\n`;\n_c = AppContainer;\nconst Header = styled.header`\n  background: rgba(255, 255, 255, 0.1);\n  backdrop-filter: blur(10px);\n  padding: 1rem;\n  text-align: center;\n  color: white;\n  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);\n`;\n_c2 = Header;\nconst Title = styled.h1`\n  margin: 0;\n  font-size: 1.5rem;\n  font-weight: 600;\n`;\n_c3 = Title;\nconst Subtitle = styled.p`\n  margin: 0.5rem 0 0 0;\n  font-size: 0.9rem;\n  opacity: 0.8;\n`;\n_c4 = Subtitle;\nconst MainContent = styled.main`\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  max-width: 600px;\n  margin: 0 auto;\n  width: 100%;\n  padding: 1rem;\n`;\n_c5 = MainContent;\nconst BookingCodeInput = styled.div`\n  background: rgba(255, 255, 255, 0.1);\n  backdrop-filter: blur(10px);\n  border-radius: 15px;\n  padding: 1rem;\n  margin-bottom: 1rem;\n  display: flex;\n  gap: 0.5rem;\n  align-items: center;\n`;\n_c6 = BookingCodeInput;\nconst Input = styled.input`\n  flex: 1;\n  padding: 0.75rem;\n  border: none;\n  border-radius: 10px;\n  background: rgba(255, 255, 255, 0.9);\n  font-size: 1rem;\n  outline: none;\n  \n  &:focus {\n    box-shadow: 0 0 0 2px rgba(255, 255, 255, 0.3);\n  }\n`;\n_c7 = Input;\nconst ChatContainer = styled.div`\n  flex: 1;\n  background: rgba(255, 255, 255, 0.1);\n  backdrop-filter: blur(10px);\n  border-radius: 15px;\n  padding: 1rem;\n  margin-bottom: 1rem;\n  overflow-y: auto;\n  max-height: 60vh;\n  display: flex;\n  flex-direction: column;\n  gap: 0.5rem;\n`;\n_c8 = ChatContainer;\nconst MessageBubble = styled(motion.div)`\n  display: flex;\n  align-items: flex-start;\n  gap: 0.5rem;\n  justify-content: ${props => props.$isOwn ? 'flex-end' : 'flex-start'};\n`;\n_c9 = MessageBubble;\nconst MessageContent = styled.div`\n  background: ${props => props.$isOwn ? 'rgba(255, 255, 255, 0.9)' : 'rgba(255, 255, 255, 0.2)'};\n  color: ${props => props.$isOwn ? '#333' : 'white'};\n  padding: 0.75rem 1rem;\n  border-radius: 18px;\n  max-width: 70%;\n  word-wrap: break-word;\n  position: relative;\n  \n  ${props => props.$isOwn ? `\n    border-bottom-right-radius: 5px;\n  ` : `\n    border-bottom-left-radius: 5px;\n  `}\n`;\n_c0 = MessageContent;\nconst MessageTime = styled.div`\n  font-size: 0.7rem;\n  opacity: 0.7;\n  margin-top: 0.25rem;\n`;\n_c1 = MessageTime;\nconst Avatar = styled.div`\n  width: 32px;\n  height: 32px;\n  border-radius: 50%;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  background: ${props => {\n  switch (props.$type) {\n    case 'driver':\n      return 'rgba(255, 255, 255, 0.9)';\n    case 'passenger':\n      return 'rgba(255, 255, 255, 0.7)';\n    case 'ai':\n      return 'rgba(255, 255, 255, 0.8)';\n    default:\n      return 'rgba(255, 255, 255, 0.5)';\n  }\n}};\n  color: #333;\n  font-size: 0.8rem;\n  font-weight: bold;\n`;\n_c10 = Avatar;\nconst InputContainer = styled.div`\n  display: flex;\n  gap: 0.5rem;\n  align-items: center;\n  background: rgba(255, 255, 255, 0.1);\n  backdrop-filter: blur(10px);\n  border-radius: 25px;\n  padding: 0.5rem;\n`;\n_c11 = InputContainer;\nconst TextInput = styled.input`\n  flex: 1;\n  padding: 0.75rem 1rem;\n  border: none;\n  border-radius: 20px;\n  background: rgba(255, 255, 255, 0.9);\n  font-size: 1rem;\n  outline: none;\n  \n  &:focus {\n    box-shadow: 0 0 0 2px rgba(255, 255, 255, 0.3);\n  }\n`;\n_c12 = TextInput;\nconst Button = styled(motion.button)`\n  width: 44px;\n  height: 44px;\n  border: none;\n  border-radius: 50%;\n  background: rgba(255, 255, 255, 0.9);\n  color: #333;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  cursor: pointer;\n  font-size: 1.2rem;\n  transition: all 0.2s ease;\n  \n  &:hover {\n    background: rgba(255, 255, 255, 1);\n    transform: scale(1.05);\n  }\n  \n  &:active {\n    transform: scale(0.95);\n  }\n  \n  &:disabled {\n    opacity: 0.5;\n    cursor: not-allowed;\n  }\n`;\n_c13 = Button;\nconst VoiceButton = styled(Button)`\n  background: ${props => props.$isListening ? 'rgba(255, 100, 100, 0.9)' : 'rgba(255, 255, 255, 0.9)'};\n  color: ${props => props.$isListening ? 'white' : '#333'};\n`;\n_c14 = VoiceButton;\nconst StatusMessage = styled.div`\n  text-align: center;\n  color: white;\n  font-size: 0.9rem;\n  opacity: 0.8;\n  margin: 0.5rem 0;\n`;\n_c15 = StatusMessage;\nconst CallIndicator = styled.div`\n  display: flex;\n  align-items: center;\n  gap: 0.5rem;\n  background: rgba(255, 100, 100, 0.2);\n  padding: 0.5rem 1rem;\n  border-radius: 10px;\n  color: white;\n  font-size: 0.9rem;\n`;\n\n// App Component\n_c16 = CallIndicator;\nconst App = () => {\n  _s();\n  const [bookingCode, setBookingCode] = useState('');\n  const [messages, setMessages] = useState([]);\n  const [inputText, setInputText] = useState('');\n  const [isListening, setIsListening] = useState(false);\n  const [isConnected, setIsConnected] = useState(false);\n  const [recognition, setRecognition] = useState(null);\n  const [statusMessage, setStatusMessage] = useState('');\n  const chatContainerRef = useRef(null);\n  const inputRef = useRef(null);\n  const connectionRef = useRef({\n    isConnected: false,\n    bookingCode: ''\n  });\n\n  // Initialize speech recognition\n  useEffect(() => {\n    const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;\n    if (SpeechRecognition) {\n      const recognition = new SpeechRecognition();\n      recognition.continuous = false;\n      recognition.interimResults = false;\n      recognition.lang = 'en-US';\n      recognition.onstart = () => {\n        setIsListening(true);\n        setStatusMessage('Listening...');\n      };\n      recognition.onend = () => {\n        setIsListening(false);\n        setStatusMessage('');\n      };\n      recognition.onerror = event => {\n        console.error('Speech recognition error:', event.error);\n        console.error('Error details:', event);\n        setIsListening(false);\n        setStatusMessage(`Voice recognition error: ${event.error}. Please try again.`);\n      };\n      recognition.onresult = event => {\n        console.log('Speech recognition result:', event);\n        console.log('Results length:', event.results.length);\n        if (event.results.length > 0) {\n          const result = event.results[0];\n          console.log('First result:', result);\n\n          // Try different ways to access transcript\n          let transcript = null;\n\n          // Method 1: Direct transcript property\n          if (result.transcript) {\n            transcript = result.transcript;\n            console.log('Found transcript via result.transcript');\n          }\n          // Method 2: Access via index if it's an array-like object\n          else if (result[0] && result[0].transcript) {\n            transcript = result[0].transcript;\n            console.log('Found transcript via result[0].transcript');\n          }\n          // Method 3: Try to access the first item\n          else if (typeof result.item === 'function') {\n            const firstItem = result.item(0);\n            if (firstItem && firstItem.transcript) {\n              transcript = firstItem.transcript;\n              console.log('Found transcript via result.item(0).transcript');\n            }\n          }\n          // Method 4: Try to iterate through results\n          else {\n            for (let i = 0; i < result.length; i++) {\n              const item = result[i];\n              if (item && item.transcript) {\n                transcript = item.transcript;\n                console.log(`Found transcript via result[${i}].transcript`);\n                break;\n              }\n            }\n          }\n          if (transcript) {\n            console.log('Voice transcript:', transcript);\n\n            // Check if connected before processing voice command\n            console.log('🔍 DEBUG: Connection check - isConnected:', connectionRef.current.isConnected, 'bookingCode:', connectionRef.current.bookingCode);\n            if (!connectionRef.current.isConnected || !connectionRef.current.bookingCode) {\n              console.log('❌ DEBUG: Voice recognition triggered but not connected');\n              setStatusMessage('Please connect to a booking first by entering the booking code.');\n              return;\n            }\n            setStatusMessage('Processing voice command...');\n\n            // Use AI agent to process voice command\n            processVoiceCommand(transcript);\n          } else {\n            console.log('No transcript found in any method');\n            console.log('Available properties:', Object.keys(result));\n            setStatusMessage('No speech detected. Please try again.');\n          }\n        } else {\n          console.log('No results in event');\n          setStatusMessage('No speech detected. Please try again.');\n        }\n      };\n      setRecognition(recognition);\n    } else {\n      setStatusMessage('Voice recognition not supported in this browser.');\n    }\n  }, []);\n\n  // Auto-scroll to bottom when new messages arrive\n  useEffect(() => {\n    if (chatContainerRef.current) {\n      chatContainerRef.current.scrollTop = chatContainerRef.current.scrollHeight;\n    }\n  }, [messages]);\n\n  // Poll for new messages\n  useEffect(() => {\n    if (!isConnected || !bookingCode) return;\n    const pollInterval = setInterval(async () => {\n      try {\n        const response = await axios.get(`/api/v1/get_message/${bookingCode}`);\n        if (response.data.success) {\n          const newMessages = response.data.data.messages || [];\n          setMessages(newMessages);\n        }\n      } catch (error) {\n        console.error('Polling error:', error);\n      }\n    }, 3000); // Poll every 3 seconds\n\n    return () => clearInterval(pollInterval);\n  }, [isConnected, bookingCode]);\n\n  // Connect to booking\n  const connectToBooking = async () => {\n    if (!(bookingCode || '').trim()) {\n      setStatusMessage('Please enter a booking code.');\n      return;\n    }\n    try {\n      setStatusMessage('Connecting to booking...');\n\n      // Test connection by getting messages\n      const response = await axios.get(`${API_ENDPOINTS.GET_MESSAGES}/${bookingCode}`);\n      if (response.data.success) {\n        setIsConnected(true);\n        setMessages(response.data.data.messages || []);\n        setStatusMessage('Connected successfully!');\n\n        // Update connection ref\n        connectionRef.current = {\n          isConnected: true,\n          bookingCode: bookingCode\n        };\n\n        // Add welcome message\n        const welcomeMessage = {\n          id: Date.now().toString(),\n          text: `Welcome to booking ${bookingCode}! You can now chat with your driver.`,\n          sender: 'ai',\n          timestamp: new Date().toISOString(),\n          type: 'text'\n        };\n        setMessages(prev => [...prev, welcomeMessage]);\n      }\n    } catch (error) {\n      console.error('Connection error:', error);\n      setStatusMessage('Failed to connect. Please check your booking code.');\n    }\n  };\n\n  // Send message\n  const sendMessage = async () => {\n    console.log('Send message called with inputText:', inputText);\n    if (!(inputText || '').trim() || !isConnected) {\n      console.log('Send message blocked - inputText:', inputText, 'isConnected:', isConnected);\n      return;\n    }\n    const newMessage = {\n      id: Date.now().toString(),\n      text: inputText,\n      sender: 'passenger',\n      timestamp: new Date().toISOString(),\n      type: 'text'\n    };\n    console.log('Adding message to UI:', newMessage);\n    setMessages(prev => [...prev, newMessage]);\n    setInputText('');\n    setStatusMessage('Sending message...');\n    try {\n      const response = await axios.post(API_ENDPOINTS.SEND_MESSAGE, {\n        booking_code: bookingCode,\n        message: inputText,\n        sender: 'passenger'\n      });\n      if (response.data.success) {\n        setStatusMessage('Message sent successfully!');\n\n        // Add AI response\n        const aiResponse = {\n          id: (Date.now() + 1).toString(),\n          text: 'Message sent successfully. The driver will be notified.',\n          sender: 'ai',\n          timestamp: new Date().toISOString(),\n          type: 'text'\n        };\n        setMessages(prev => [...prev, aiResponse]);\n      }\n    } catch (error) {\n      console.error('Send message error:', error);\n      setStatusMessage('Failed to send message. Please try again.');\n    }\n  };\n\n  // Make call\n  const makeCall = async () => {\n    if (!isConnected) return;\n    setStatusMessage('Initiating call...');\n    try {\n      const response = await axios.post(API_ENDPOINTS.MAKE_CALL, {\n        booking_code: bookingCode,\n        call_type: 'voice',\n        duration: 0\n      });\n      if (response.data.success) {\n        const callMessage = {\n          id: Date.now().toString(),\n          text: 'Call initiated successfully',\n          sender: 'ai',\n          timestamp: new Date().toISOString(),\n          type: 'call',\n          callDetails: {\n            duration: 0,\n            status: 'initiated'\n          }\n        };\n        setMessages(prev => [...prev, callMessage]);\n        setStatusMessage('Call initiated!');\n      }\n    } catch (error) {\n      console.error('Make call error:', error);\n      setStatusMessage('Failed to initiate call. Please try again.');\n    }\n  };\n\n  // Start voice recognition\n  const startListening = () => {\n    if (recognition && !isListening) {\n      recognition.start();\n    }\n  };\n\n  // Process voice command using AI agent\n  const processVoiceCommand = async transcript => {\n    console.log('🔍 DEBUG: processVoiceCommand called with:', transcript);\n    console.log('🔍 DEBUG: isConnected:', connectionRef.current.isConnected, 'bookingCode:', connectionRef.current.bookingCode);\n\n    // Only process voice commands if already connected\n    if (!connectionRef.current.isConnected || !connectionRef.current.bookingCode) {\n      console.log('❌ DEBUG: Not connected to booking');\n      setStatusMessage('Please connect to a booking first by entering the booking code.');\n      return;\n    }\n\n    // If connected, process with AI\n    await processVoiceCommandWithAI(transcript, connectionRef.current.bookingCode);\n  };\n\n  // Helper function to process voice command with AI\n  const processVoiceCommandWithAI = async (transcript, bookingCode) => {\n    try {\n      console.log('Processing voice command:', transcript);\n      const response = await axios.post(API_ENDPOINTS.AI_AGENT, {\n        booking_code: bookingCode,\n        user_input: transcript,\n        user_type: 'passenger'\n      });\n      if (response.data.success) {\n        console.log('AI agent response:', response.data);\n\n        // Add AI response to chat\n        const aiMessage = {\n          id: Date.now().toString(),\n          text: `AI processed: \"${transcript}\" → \"${response.data.data.text}\"`,\n          sender: 'ai',\n          timestamp: new Date().toISOString(),\n          type: 'text'\n        };\n        setMessages(prev => [...prev, aiMessage]);\n        setStatusMessage('Voice command processed successfully!');\n      }\n    } catch (error) {\n      console.error('AI agent error:', error);\n      setStatusMessage('Failed to process voice command. Please try again.');\n    }\n  };\n\n  // Handle key press\n  const handleKeyPress = e => {\n    if (e.key === 'Enter' && !e.shiftKey) {\n      e.preventDefault();\n      sendMessage();\n    }\n  };\n\n  // Poll for new messages\n  useEffect(() => {\n    if (!isConnected || !bookingCode) return;\n    const pollInterval = setInterval(async () => {\n      try {\n        const response = await axios.get(`${API_ENDPOINTS.GET_MESSAGES}/${bookingCode}`);\n        if (response.data.success) {\n          const newMessages = response.data.data.messages || [];\n          setMessages(newMessages);\n        }\n      } catch (error) {\n        console.error('Polling error:', error);\n      }\n    }, 3000); // Poll every 3 seconds\n\n    return () => clearInterval(pollInterval);\n  }, [isConnected, bookingCode]);\n  return /*#__PURE__*/_jsxDEV(AppContainer, {\n    children: [/*#__PURE__*/_jsxDEV(Header, {\n      children: [/*#__PURE__*/_jsxDEV(Title, {\n        children: \"PAX - Passenger Assistant\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 615,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Subtitle, {\n        children: \"AI-powered chat and voice assistant\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 616,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 614,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(MainContent, {\n      children: [!isConnected ? /*#__PURE__*/_jsxDEV(BookingCodeInput, {\n        children: [/*#__PURE__*/_jsxDEV(Input, {\n          type: \"text\",\n          placeholder: \"Enter booking code...\",\n          value: bookingCode,\n          onChange: e => setBookingCode(e.target.value),\n          onKeyPress: e => e.key === 'Enter' && connectToBooking()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 622,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          whileHover: {\n            scale: 1.05\n          },\n          whileTap: {\n            scale: 0.95\n          },\n          onClick: connectToBooking,\n          children: \"Connect\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 629,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 621,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(ChatContainer, {\n          ref: chatContainerRef,\n          children: /*#__PURE__*/_jsxDEV(AnimatePresence, {\n            children: messages.map(message => /*#__PURE__*/_jsxDEV(MessageBubble, {\n              $isOwn: message.sender === 'passenger',\n              initial: {\n                opacity: 0,\n                y: 20\n              },\n              animate: {\n                opacity: 1,\n                y: 0\n              },\n              exit: {\n                opacity: 0,\n                y: -20\n              },\n              transition: {\n                duration: 0.3\n              },\n              children: [message.sender !== 'passenger' && /*#__PURE__*/_jsxDEV(Avatar, {\n                $type: message.sender,\n                children: message.sender === 'driver' ? /*#__PURE__*/_jsxDEV(FaCar, {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 652,\n                  columnNumber: 56\n                }, this) : /*#__PURE__*/_jsxDEV(FaUser, {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 652,\n                  columnNumber: 68\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 651,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                children: [/*#__PURE__*/_jsxDEV(MessageContent, {\n                  $isOwn: message.sender === 'passenger',\n                  children: message.type === 'call' ? /*#__PURE__*/_jsxDEV(CallIndicator, {\n                    children: [/*#__PURE__*/_jsxDEV(FaPhone, {}, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 659,\n                      columnNumber: 29\n                    }, this), message.text]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 658,\n                    columnNumber: 27\n                  }, this) : message.text\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 656,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(MessageTime, {\n                  children: new Date(message.timestamp).toLocaleTimeString()\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 666,\n                  columnNumber: 23\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 655,\n                columnNumber: 21\n              }, this), message.sender === 'passenger' && /*#__PURE__*/_jsxDEV(Avatar, {\n                $type: message.sender,\n                children: /*#__PURE__*/_jsxDEV(FaUser, {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 672,\n                  columnNumber: 25\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 671,\n                columnNumber: 23\n              }, this)]\n            }, message.id, true, {\n              fileName: _jsxFileName,\n              lineNumber: 642,\n              columnNumber: 19\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 640,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 639,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(InputContainer, {\n          children: [/*#__PURE__*/_jsxDEV(TextInput, {\n            ref: inputRef,\n            type: \"text\",\n            placeholder: \"Type a message or use voice...\",\n            value: inputText || '',\n            onChange: e => setInputText(e.target.value || ''),\n            onKeyPress: handleKeyPress,\n            disabled: !isConnected\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 681,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(VoiceButton, {\n            $isListening: isListening,\n            whileHover: {\n              scale: 1.05\n            },\n            whileTap: {\n              scale: 0.95\n            },\n            onClick: startListening,\n            disabled: !isConnected || isListening,\n            children: isListening ? /*#__PURE__*/_jsxDEV(FaMicrophoneSlash, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 697,\n              columnNumber: 32\n            }, this) : /*#__PURE__*/_jsxDEV(FaMicrophone, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 697,\n              columnNumber: 56\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 690,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            whileHover: {\n              scale: 1.05\n            },\n            whileTap: {\n              scale: 0.95\n            },\n            onClick: sendMessage,\n            disabled: !(inputText || '').trim() || !isConnected,\n            children: /*#__PURE__*/_jsxDEV(FaPaperPlane, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 705,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 699,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            whileHover: {\n              scale: 1.05\n            },\n            whileTap: {\n              scale: 0.95\n            },\n            onClick: makeCall,\n            disabled: !isConnected,\n            children: /*#__PURE__*/_jsxDEV(FaPhone, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 713,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 707,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 680,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true), statusMessage && /*#__PURE__*/_jsxDEV(StatusMessage, {\n        children: statusMessage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 720,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 619,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 613,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"NrNYCcLbp0vz9zwv+GhnBmDffrs=\");\n_c17 = App;\nexport default App;\nvar _c, _c2, _c3, _c4, _c5, _c6, _c7, _c8, _c9, _c0, _c1, _c10, _c11, _c12, _c13, _c14, _c15, _c16, _c17;\n$RefreshReg$(_c, \"AppContainer\");\n$RefreshReg$(_c2, \"Header\");\n$RefreshReg$(_c3, \"Title\");\n$RefreshReg$(_c4, \"Subtitle\");\n$RefreshReg$(_c5, \"MainContent\");\n$RefreshReg$(_c6, \"BookingCodeInput\");\n$RefreshReg$(_c7, \"Input\");\n$RefreshReg$(_c8, \"ChatContainer\");\n$RefreshReg$(_c9, \"MessageBubble\");\n$RefreshReg$(_c0, \"MessageContent\");\n$RefreshReg$(_c1, \"MessageTime\");\n$RefreshReg$(_c10, \"Avatar\");\n$RefreshReg$(_c11, \"InputContainer\");\n$RefreshReg$(_c12, \"TextInput\");\n$RefreshReg$(_c13, \"Button\");\n$RefreshReg$(_c14, \"VoiceButton\");\n$RefreshReg$(_c15, \"StatusMessage\");\n$RefreshReg$(_c16, \"CallIndicator\");\n$RefreshReg$(_c17, \"App\");","map":{"version":3,"names":["React","useState","useEffect","useRef","styled","motion","AnimatePresence","FaMicrophone","FaMicrophoneSlash","FaPaperPlane","FaPhone","FaUser","FaCar","axios","API_ENDPOINTS","jsxDEV","_jsxDEV","Fragment","_Fragment","AppContainer","div","_c","Header","header","_c2","Title","h1","_c3","Subtitle","p","_c4","MainContent","main","_c5","BookingCodeInput","_c6","Input","input","_c7","ChatContainer","_c8","MessageBubble","props","$isOwn","_c9","MessageContent","_c0","MessageTime","_c1","Avatar","$type","_c10","InputContainer","_c11","TextInput","_c12","Button","button","_c13","VoiceButton","$isListening","_c14","StatusMessage","_c15","CallIndicator","_c16","App","_s","bookingCode","setBookingCode","messages","setMessages","inputText","setInputText","isListening","setIsListening","isConnected","setIsConnected","recognition","setRecognition","statusMessage","setStatusMessage","chatContainerRef","inputRef","connectionRef","SpeechRecognition","window","webkitSpeechRecognition","continuous","interimResults","lang","onstart","onend","onerror","event","console","error","onresult","log","results","length","result","transcript","item","firstItem","i","current","processVoiceCommand","Object","keys","scrollTop","scrollHeight","pollInterval","setInterval","response","get","data","success","newMessages","clearInterval","connectToBooking","trim","GET_MESSAGES","welcomeMessage","id","Date","now","toString","text","sender","timestamp","toISOString","type","prev","sendMessage","newMessage","post","SEND_MESSAGE","booking_code","message","aiResponse","makeCall","MAKE_CALL","call_type","duration","callMessage","callDetails","status","startListening","start","processVoiceCommandWithAI","AI_AGENT","user_input","user_type","aiMessage","handleKeyPress","e","key","shiftKey","preventDefault","children","fileName","_jsxFileName","lineNumber","columnNumber","placeholder","value","onChange","target","onKeyPress","whileHover","scale","whileTap","onClick","ref","map","initial","opacity","y","animate","exit","transition","toLocaleTimeString","disabled","_c17","$RefreshReg$"],"sources":["/Users/sameer.jha/Python_Projects/NavieTakieSimulation/frontend/pax-app/src/App.tsx"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport styled from 'styled-components';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport { \n  FaMicrophone, \n  FaMicrophoneSlash, \n  FaPaperPlane, \n  FaPhone,\n  FaUser,\n  FaCar\n} from 'react-icons/fa';\nimport axios from 'axios';\nimport { API_ENDPOINTS, CONFIG } from './config';\n\n// Types\ninterface Message {\n  id: string;\n  text: string;\n  sender: 'driver' | 'passenger' | 'ai';\n  timestamp: string;\n  type: 'text' | 'call';\n  callDetails?: {\n    duration: number;\n    status: string;\n  };\n}\n\ninterface SpeechRecognitionErrorEvent extends Event {\n  error: string;\n  message: string;\n}\n\ninterface SpeechRecognitionResult {\n  transcript: string;\n  confidence: number;\n}\n\ninterface SpeechRecognitionResultList {\n  length: number;\n  item(index: number): SpeechRecognitionResult;\n  [index: number]: SpeechRecognitionResult;\n}\n\ninterface SpeechRecognitionEvent extends Event {\n  resultIndex: number;\n  results: SpeechRecognitionResultList;\n}\n\ninterface VoiceRecognition extends EventTarget {\n  start(): void;\n  stop(): void;\n  abort(): void;\n  continuous: boolean;\n  interimResults: boolean;\n  lang: string;\n  onstart: ((this: VoiceRecognition, ev: Event) => any) | null;\n  onend: ((this: VoiceRecognition, ev: Event) => any) | null;\n  onerror: ((this: VoiceRecognition, ev: SpeechRecognitionErrorEvent) => any) | null;\n  onresult: ((this: VoiceRecognition, ev: SpeechRecognitionEvent) => any) | null;\n}\n\ndeclare global {\n  interface Window {\n    SpeechRecognition: new () => VoiceRecognition;\n    webkitSpeechRecognition: new () => VoiceRecognition;\n  }\n}\n\n// Styled Components (same as DAX app)\nconst AppContainer = styled.div`\n  min-height: 100vh;\n  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n  display: flex;\n  flex-direction: column;\n`;\n\nconst Header = styled.header`\n  background: rgba(255, 255, 255, 0.1);\n  backdrop-filter: blur(10px);\n  padding: 1rem;\n  text-align: center;\n  color: white;\n  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);\n`;\n\nconst Title = styled.h1`\n  margin: 0;\n  font-size: 1.5rem;\n  font-weight: 600;\n`;\n\nconst Subtitle = styled.p`\n  margin: 0.5rem 0 0 0;\n  font-size: 0.9rem;\n  opacity: 0.8;\n`;\n\nconst MainContent = styled.main`\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  max-width: 600px;\n  margin: 0 auto;\n  width: 100%;\n  padding: 1rem;\n`;\n\nconst BookingCodeInput = styled.div`\n  background: rgba(255, 255, 255, 0.1);\n  backdrop-filter: blur(10px);\n  border-radius: 15px;\n  padding: 1rem;\n  margin-bottom: 1rem;\n  display: flex;\n  gap: 0.5rem;\n  align-items: center;\n`;\n\nconst Input = styled.input`\n  flex: 1;\n  padding: 0.75rem;\n  border: none;\n  border-radius: 10px;\n  background: rgba(255, 255, 255, 0.9);\n  font-size: 1rem;\n  outline: none;\n  \n  &:focus {\n    box-shadow: 0 0 0 2px rgba(255, 255, 255, 0.3);\n  }\n`;\n\nconst ChatContainer = styled.div`\n  flex: 1;\n  background: rgba(255, 255, 255, 0.1);\n  backdrop-filter: blur(10px);\n  border-radius: 15px;\n  padding: 1rem;\n  margin-bottom: 1rem;\n  overflow-y: auto;\n  max-height: 60vh;\n  display: flex;\n  flex-direction: column;\n  gap: 0.5rem;\n`;\n\nconst MessageBubble = styled(motion.div)<{ $isOwn: boolean }>`\n  display: flex;\n  align-items: flex-start;\n  gap: 0.5rem;\n  justify-content: ${props => props.$isOwn ? 'flex-end' : 'flex-start'};\n`;\n\nconst MessageContent = styled.div<{ $isOwn: boolean }>`\n  background: ${props => props.$isOwn ? 'rgba(255, 255, 255, 0.9)' : 'rgba(255, 255, 255, 0.2)'};\n  color: ${props => props.$isOwn ? '#333' : 'white'};\n  padding: 0.75rem 1rem;\n  border-radius: 18px;\n  max-width: 70%;\n  word-wrap: break-word;\n  position: relative;\n  \n  ${props => props.$isOwn ? `\n    border-bottom-right-radius: 5px;\n  ` : `\n    border-bottom-left-radius: 5px;\n  `}\n`;\n\nconst MessageTime = styled.div`\n  font-size: 0.7rem;\n  opacity: 0.7;\n  margin-top: 0.25rem;\n`;\n\nconst Avatar = styled.div<{ $type: 'driver' | 'passenger' | 'ai' }>`\n  width: 32px;\n  height: 32px;\n  border-radius: 50%;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  background: ${props => {\n    switch (props.$type) {\n      case 'driver': return 'rgba(255, 255, 255, 0.9)';\n      case 'passenger': return 'rgba(255, 255, 255, 0.7)';\n      case 'ai': return 'rgba(255, 255, 255, 0.8)';\n      default: return 'rgba(255, 255, 255, 0.5)';\n    }\n  }};\n  color: #333;\n  font-size: 0.8rem;\n  font-weight: bold;\n`;\n\nconst InputContainer = styled.div`\n  display: flex;\n  gap: 0.5rem;\n  align-items: center;\n  background: rgba(255, 255, 255, 0.1);\n  backdrop-filter: blur(10px);\n  border-radius: 25px;\n  padding: 0.5rem;\n`;\n\nconst TextInput = styled.input`\n  flex: 1;\n  padding: 0.75rem 1rem;\n  border: none;\n  border-radius: 20px;\n  background: rgba(255, 255, 255, 0.9);\n  font-size: 1rem;\n  outline: none;\n  \n  &:focus {\n    box-shadow: 0 0 0 2px rgba(255, 255, 255, 0.3);\n  }\n`;\n\nconst Button = styled(motion.button)`\n  width: 44px;\n  height: 44px;\n  border: none;\n  border-radius: 50%;\n  background: rgba(255, 255, 255, 0.9);\n  color: #333;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  cursor: pointer;\n  font-size: 1.2rem;\n  transition: all 0.2s ease;\n  \n  &:hover {\n    background: rgba(255, 255, 255, 1);\n    transform: scale(1.05);\n  }\n  \n  &:active {\n    transform: scale(0.95);\n  }\n  \n  &:disabled {\n    opacity: 0.5;\n    cursor: not-allowed;\n  }\n`;\n\nconst VoiceButton = styled(Button)<{ $isListening: boolean }>`\n  background: ${props => props.$isListening ? 'rgba(255, 100, 100, 0.9)' : 'rgba(255, 255, 255, 0.9)'};\n  color: ${props => props.$isListening ? 'white' : '#333'};\n`;\n\nconst StatusMessage = styled.div`\n  text-align: center;\n  color: white;\n  font-size: 0.9rem;\n  opacity: 0.8;\n  margin: 0.5rem 0;\n`;\n\nconst CallIndicator = styled.div`\n  display: flex;\n  align-items: center;\n  gap: 0.5rem;\n  background: rgba(255, 100, 100, 0.2);\n  padding: 0.5rem 1rem;\n  border-radius: 10px;\n  color: white;\n  font-size: 0.9rem;\n`;\n\n// App Component\nconst App: React.FC = () => {\n  const [bookingCode, setBookingCode] = useState('');\n  const [messages, setMessages] = useState<Message[]>([]);\n  const [inputText, setInputText] = useState<string>('');\n  const [isListening, setIsListening] = useState(false);\n  const [isConnected, setIsConnected] = useState(false);\n  const [recognition, setRecognition] = useState<VoiceRecognition | null>(null);\n  const [statusMessage, setStatusMessage] = useState('');\n  \n  const chatContainerRef = useRef<HTMLDivElement>(null);\n  const inputRef = useRef<HTMLInputElement>(null);\n  const connectionRef = useRef({ isConnected: false, bookingCode: '' });\n\n  // Initialize speech recognition\n  useEffect(() => {\n    const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;\n    if (SpeechRecognition) {\n      const recognition = new SpeechRecognition();\n      recognition.continuous = false;\n      recognition.interimResults = false;\n      recognition.lang = 'en-US';\n      \n      recognition.onstart = () => {\n        setIsListening(true);\n        setStatusMessage('Listening...');\n      };\n      \n      recognition.onend = () => {\n        setIsListening(false);\n        setStatusMessage('');\n      };\n      \n      recognition.onerror = (event) => {\n        console.error('Speech recognition error:', event.error);\n        console.error('Error details:', event);\n        setIsListening(false);\n        setStatusMessage(`Voice recognition error: ${event.error}. Please try again.`);\n      };\n      \n      recognition.onresult = (event) => {\n        console.log('Speech recognition result:', event);\n        console.log('Results length:', event.results.length);\n        \n        if (event.results.length > 0) {\n          const result = event.results[0];\n          console.log('First result:', result);\n          \n          // Try different ways to access transcript\n          let transcript = null;\n          \n          // Method 1: Direct transcript property\n          if (result.transcript) {\n            transcript = result.transcript;\n            console.log('Found transcript via result.transcript');\n          }\n          // Method 2: Access via index if it's an array-like object\n          else if ((result as any)[0] && (result as any)[0].transcript) {\n            transcript = (result as any)[0].transcript;\n            console.log('Found transcript via result[0].transcript');\n          }\n          // Method 3: Try to access the first item\n          else if (typeof (result as any).item === 'function') {\n            const firstItem = (result as any).item(0);\n            if (firstItem && firstItem.transcript) {\n              transcript = firstItem.transcript;\n              console.log('Found transcript via result.item(0).transcript');\n            }\n          }\n          // Method 4: Try to iterate through results\n          else {\n            for (let i = 0; i < (result as any).length; i++) {\n              const item = (result as any)[i];\n              if (item && item.transcript) {\n                transcript = item.transcript;\n                console.log(`Found transcript via result[${i}].transcript`);\n                break;\n              }\n            }\n          }\n          \n          if (transcript) {\n            console.log('Voice transcript:', transcript);\n            \n            // Check if connected before processing voice command\n            console.log('🔍 DEBUG: Connection check - isConnected:', connectionRef.current.isConnected, 'bookingCode:', connectionRef.current.bookingCode);\n            if (!connectionRef.current.isConnected || !connectionRef.current.bookingCode) {\n              console.log('❌ DEBUG: Voice recognition triggered but not connected');\n              setStatusMessage('Please connect to a booking first by entering the booking code.');\n              return;\n            }\n            \n            setStatusMessage('Processing voice command...');\n            \n            // Use AI agent to process voice command\n            processVoiceCommand(transcript);\n          } else {\n            console.log('No transcript found in any method');\n            console.log('Available properties:', Object.keys(result));\n            setStatusMessage('No speech detected. Please try again.');\n          }\n        } else {\n          console.log('No results in event');\n          setStatusMessage('No speech detected. Please try again.');\n        }\n      };\n      \n      setRecognition(recognition);\n    } else {\n      setStatusMessage('Voice recognition not supported in this browser.');\n    }\n  }, []);\n\n  // Auto-scroll to bottom when new messages arrive\n  useEffect(() => {\n    if (chatContainerRef.current) {\n      chatContainerRef.current.scrollTop = chatContainerRef.current.scrollHeight;\n    }\n  }, [messages]);\n\n  // Poll for new messages\n  useEffect(() => {\n    if (!isConnected || !bookingCode) return;\n\n    const pollInterval = setInterval(async () => {\n      try {\n        const response = await axios.get(`/api/v1/get_message/${bookingCode}`);\n        if (response.data.success) {\n          const newMessages = response.data.data.messages || [];\n          setMessages(newMessages);\n        }\n      } catch (error) {\n        console.error('Polling error:', error);\n      }\n    }, 3000); // Poll every 3 seconds\n\n    return () => clearInterval(pollInterval);\n  }, [isConnected, bookingCode]);\n\n  // Connect to booking\n  const connectToBooking = async () => {\n    if (!(bookingCode || '').trim()) {\n      setStatusMessage('Please enter a booking code.');\n      return;\n    }\n\n    try {\n      setStatusMessage('Connecting to booking...');\n      \n      // Test connection by getting messages\n      const response = await axios.get(`${API_ENDPOINTS.GET_MESSAGES}/${bookingCode}`);\n      \n      if (response.data.success) {\n        setIsConnected(true);\n        setMessages(response.data.data.messages || []);\n        setStatusMessage('Connected successfully!');\n        \n        // Update connection ref\n        connectionRef.current = { isConnected: true, bookingCode: bookingCode };\n        \n        // Add welcome message\n        const welcomeMessage: Message = {\n          id: Date.now().toString(),\n          text: `Welcome to booking ${bookingCode}! You can now chat with your driver.`,\n          sender: 'ai',\n          timestamp: new Date().toISOString(),\n          type: 'text'\n        };\n        setMessages(prev => [...prev, welcomeMessage]);\n      }\n    } catch (error) {\n      console.error('Connection error:', error);\n      setStatusMessage('Failed to connect. Please check your booking code.');\n    }\n  };\n\n  // Send message\n  const sendMessage = async () => {\n    console.log('Send message called with inputText:', inputText);\n    if (!(inputText || '').trim() || !isConnected) {\n      console.log('Send message blocked - inputText:', inputText, 'isConnected:', isConnected);\n      return;\n    }\n\n    const newMessage: Message = {\n      id: Date.now().toString(),\n      text: inputText,\n      sender: 'passenger',\n      timestamp: new Date().toISOString(),\n      type: 'text'\n    };\n\n    console.log('Adding message to UI:', newMessage);\n    setMessages(prev => [...prev, newMessage]);\n    setInputText('');\n    setStatusMessage('Sending message...');\n\n    try {\n      const response = await axios.post(API_ENDPOINTS.SEND_MESSAGE, {\n        booking_code: bookingCode,\n        message: inputText,\n        sender: 'passenger'\n      });\n\n      if (response.data.success) {\n        setStatusMessage('Message sent successfully!');\n        \n        // Add AI response\n        const aiResponse: Message = {\n          id: (Date.now() + 1).toString(),\n          text: 'Message sent successfully. The driver will be notified.',\n          sender: 'ai',\n          timestamp: new Date().toISOString(),\n          type: 'text'\n        };\n        setMessages(prev => [...prev, aiResponse]);\n      }\n    } catch (error) {\n      console.error('Send message error:', error);\n      setStatusMessage('Failed to send message. Please try again.');\n    }\n  };\n\n  // Make call\n  const makeCall = async () => {\n    if (!isConnected) return;\n\n    setStatusMessage('Initiating call...');\n\n    try {\n      const response = await axios.post(API_ENDPOINTS.MAKE_CALL, {\n        booking_code: bookingCode,\n        call_type: 'voice',\n        duration: 0\n      });\n\n      if (response.data.success) {\n        const callMessage: Message = {\n          id: Date.now().toString(),\n          text: 'Call initiated successfully',\n          sender: 'ai',\n          timestamp: new Date().toISOString(),\n          type: 'call',\n          callDetails: {\n            duration: 0,\n            status: 'initiated'\n          }\n        };\n        setMessages(prev => [...prev, callMessage]);\n        setStatusMessage('Call initiated!');\n      }\n    } catch (error) {\n      console.error('Make call error:', error);\n      setStatusMessage('Failed to initiate call. Please try again.');\n    }\n  };\n\n  // Start voice recognition\n  const startListening = () => {\n    if (recognition && !isListening) {\n      recognition.start();\n    }\n  };\n\n  // Process voice command using AI agent\n  const processVoiceCommand = async (transcript: string) => {\n    console.log('🔍 DEBUG: processVoiceCommand called with:', transcript);\n    console.log('🔍 DEBUG: isConnected:', connectionRef.current.isConnected, 'bookingCode:', connectionRef.current.bookingCode);\n    \n    // Only process voice commands if already connected\n    if (!connectionRef.current.isConnected || !connectionRef.current.bookingCode) {\n      console.log('❌ DEBUG: Not connected to booking');\n      setStatusMessage('Please connect to a booking first by entering the booking code.');\n      return;\n    }\n\n    // If connected, process with AI\n    await processVoiceCommandWithAI(transcript, connectionRef.current.bookingCode);\n  };\n\n  // Helper function to process voice command with AI\n  const processVoiceCommandWithAI = async (transcript: string, bookingCode: string) => {\n    try {\n      console.log('Processing voice command:', transcript);\n      \n      const response = await axios.post(API_ENDPOINTS.AI_AGENT, {\n        booking_code: bookingCode,\n        user_input: transcript,\n        user_type: 'passenger'\n      });\n\n      if (response.data.success) {\n        console.log('AI agent response:', response.data);\n        \n        // Add AI response to chat\n        const aiMessage: Message = {\n          id: Date.now().toString(),\n          text: `AI processed: \"${transcript}\" → \"${response.data.data.text}\"`,\n          sender: 'ai',\n          timestamp: new Date().toISOString(),\n          type: 'text'\n        };\n        \n        setMessages(prev => [...prev, aiMessage]);\n        setStatusMessage('Voice command processed successfully!');\n      }\n    } catch (error) {\n      console.error('AI agent error:', error);\n      setStatusMessage('Failed to process voice command. Please try again.');\n    }\n  };\n\n  // Handle key press\n  const handleKeyPress = (e: React.KeyboardEvent) => {\n    if (e.key === 'Enter' && !e.shiftKey) {\n      e.preventDefault();\n      sendMessage();\n    }\n  };\n\n  // Poll for new messages\n  useEffect(() => {\n    if (!isConnected || !bookingCode) return;\n\n    const pollInterval = setInterval(async () => {\n      try {\n        const response = await axios.get(`${API_ENDPOINTS.GET_MESSAGES}/${bookingCode}`);\n        if (response.data.success) {\n          const newMessages = response.data.data.messages || [];\n          setMessages(newMessages);\n        }\n      } catch (error) {\n        console.error('Polling error:', error);\n      }\n    }, 3000); // Poll every 3 seconds\n\n    return () => clearInterval(pollInterval);\n  }, [isConnected, bookingCode]);\n\n  return (\n    <AppContainer>\n      <Header>\n        <Title>PAX - Passenger Assistant</Title>\n        <Subtitle>AI-powered chat and voice assistant</Subtitle>\n      </Header>\n\n      <MainContent>\n        {!isConnected ? (\n          <BookingCodeInput>\n            <Input\n              type=\"text\"\n              placeholder=\"Enter booking code...\"\n              value={bookingCode}\n              onChange={(e) => setBookingCode(e.target.value)}\n              onKeyPress={(e) => e.key === 'Enter' && connectToBooking()}\n            />\n            <Button\n              whileHover={{ scale: 1.05 }}\n              whileTap={{ scale: 0.95 }}\n              onClick={connectToBooking}\n            >\n              Connect\n            </Button>\n          </BookingCodeInput>\n        ) : (\n          <>\n            <ChatContainer ref={chatContainerRef}>\n              <AnimatePresence>\n                {messages.map((message) => (\n                  <MessageBubble\n                    key={message.id}\n                    $isOwn={message.sender === 'passenger'}\n                    initial={{ opacity: 0, y: 20 }}\n                    animate={{ opacity: 1, y: 0 }}\n                    exit={{ opacity: 0, y: -20 }}\n                    transition={{ duration: 0.3 }}\n                  >\n                    {message.sender !== 'passenger' && (\n                      <Avatar $type={message.sender}>\n                        {message.sender === 'driver' ? <FaCar /> : <FaUser />}\n                      </Avatar>\n                    )}\n                    <div>\n                      <MessageContent $isOwn={message.sender === 'passenger'}>\n                        {message.type === 'call' ? (\n                          <CallIndicator>\n                            <FaPhone />\n                            {message.text}\n                          </CallIndicator>\n                        ) : (\n                          message.text\n                        )}\n                      </MessageContent>\n                      <MessageTime>\n                        {new Date(message.timestamp).toLocaleTimeString()}\n                      </MessageTime>\n                    </div>\n                    {message.sender === 'passenger' && (\n                      <Avatar $type={message.sender}>\n                        <FaUser />\n                      </Avatar>\n                    )}\n                  </MessageBubble>\n                ))}\n              </AnimatePresence>\n            </ChatContainer>\n\n            <InputContainer>\n              <TextInput\n                ref={inputRef}\n                type=\"text\"\n                placeholder=\"Type a message or use voice...\"\n                value={inputText || ''}\n                onChange={(e) => setInputText(e.target.value || '')}\n                onKeyPress={handleKeyPress}\n                disabled={!isConnected}\n              />\n              <VoiceButton\n                $isListening={isListening}\n                whileHover={{ scale: 1.05 }}\n                whileTap={{ scale: 0.95 }}\n                onClick={startListening}\n                disabled={!isConnected || isListening}\n              >\n                {isListening ? <FaMicrophoneSlash /> : <FaMicrophone />}\n              </VoiceButton>\n              <Button\n                whileHover={{ scale: 1.05 }}\n                whileTap={{ scale: 0.95 }}\n                onClick={sendMessage}\n                disabled={!(inputText || '').trim() || !isConnected}\n              >\n                <FaPaperPlane />\n              </Button>\n              <Button\n                whileHover={{ scale: 1.05 }}\n                whileTap={{ scale: 0.95 }}\n                onClick={makeCall}\n                disabled={!isConnected}\n              >\n                <FaPhone />\n              </Button>\n            </InputContainer>\n          </>\n        )}\n\n        {statusMessage && (\n          <StatusMessage>{statusMessage}</StatusMessage>\n        )}\n      </MainContent>\n    </AppContainer>\n  );\n};\n\nexport default App; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}